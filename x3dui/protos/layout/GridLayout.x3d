<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.2//EN"   "http://www.web3d.org/specifications/x3d-3.2.dtd">
<X3D profile="Immersive" version="3.2" xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.2.xsd">
	<head />
	<Scene>		
	
		<!-- This prototype implements the traditional grid layout that places
				all elements within consecutive grid cells, going 
				column-by-column, row-by-row. <proto>GridLayout</proto> instance
				can be passed as a child to <tt>layout</tt> attribute, for 
				instance, in <proto>Panel</proto>. -->
		<ProtoDeclare name="GridLayout">
			<ProtoInterface>
				<!-- Sets the number of rows that the grid will have. -->
				<field name="numOfRows" accessType="initializeOnly" type="SFInt32" value="1" />
				<!-- Sets the number of columns that the grid will have. -->
				<field name="numOfColumns" accessType="initializeOnly" type="SFInt32" value="1" />
				<!-- Specifies the horizontal gap between elements. -->
				<field name="hGap" accessType="initializeOnly" type="SFFloat" value="0.001" />
				<!-- Specifies the vertical gap between elements. -->
				<field name="vGap" accessType="initializeOnly" type="SFFloat" value="0.001" />
				<!-- Specifies how the horizontal white space will be distributed among elements.
						When set to <tt>true</tt>, each column will only be as wide as the widest
						element within that column; therefore, columns might have different widths, 
						and the grid as a whole will be positioned on the left of the container. 
						When set to <tt>false</tt>, the entire horizontal white space will be evenly 
						distributed among all columns. -->
				<field name="compressHorizontally" accessType="initializeOnly" type="SFBool" value="true" />
				<!-- Specifies how the vertical white space will be distributed among elements.
						When set to <tt>true</tt>, each row will only be as tall as the tallest
						element within that row; therefore, rows might have different heights, and 
						the grid as a whole will be positioned at the top of the container. When set 
						to <tt>false</tt>, the entire vertical white space will be evenly distributed 
						among all rows. -->
				<field name="compressVertically" accessType="initializeOnly" type="SFBool" value="true" />
				
				<!-- Indicated the number of rows in the grid. -->
				<field name="getNumOfRows" accessType="outputOnly" type="SFInt32" />
				<!-- Indicated the columns of rows in the grid. -->
				<field name="getNumOfColumns" accessType="outputOnly" type="SFInt32" />
				<!-- Returns the horizontal gap used between elements. -->
				<field name="getHGap" accessType="outputOnly" type="SFFloat" />
				<!-- Returns the vertical gap used between elements. -->
				<field name="getVGap" accessType="outputOnly" type="SFFloat" />
				<!-- Indicates how the horizontal white space is distributed among elements. For
						more details refer to the <field>compressHorizontally</field> parameter. -->
				<field name="doCompressHorizontally" accessType="outputOnly" type="SFBool" />
				<!-- Indicates how the vertical white space is distributed among elements. For
						more details refer to the <field>compressVertically</field> parameter. -->
				<field name="doCompressVertically" accessType="outputOnly" type="SFBool" />
			</ProtoInterface>
			<ProtoBody>				
				<Group>
					
				</Group>
				
				<Script DEF="S" directOutput="true">
					<!-- referenced objects -->
					<field name="numOfRows" accessType="initializeOnly" type="SFInt32" />
					<field name="numOfColumns" accessType="initializeOnly" type="SFInt32" />
					<field name="hGap" accessType="initializeOnly" type="SFFloat" />
					<field name="vGap" accessType="initializeOnly" type="SFFloat" />
					<field name="compressHorizontally" accessType="initializeOnly" type="SFBool" />
					<field name="compressVertically" accessType="initializeOnly" type="SFBool" />
				
					<field name="getNumOfRows" accessType="outputOnly" type="SFInt32" />
					<field name="getNumOfColumns" accessType="outputOnly" type="SFInt32" />
					<field name="getHGap" accessType="outputOnly" type="SFFloat" />
					<field name="getVGap" accessType="outputOnly" type="SFFloat" />
					<field name="doCompressHorizontally" accessType="outputOnly" type="SFBool" />
					<field name="doCompressVertically" accessType="outputOnly" type="SFBool" />

					<IS>
						<connect nodeField="numOfRows" protoField="numOfRows"/>
						<connect nodeField="numOfColumns" protoField="numOfColumns"/>
						<connect nodeField="hGap" protoField="hGap"/>
						<connect nodeField="vGap" protoField="vGap"/>
						<connect nodeField="compressHorizontally" protoField="compressHorizontally"/>
						<connect nodeField="compressVertically" protoField="compressVertically"/>
						
						<connect nodeField="getNumOfRows" protoField="getNumOfRows"/>
						<connect nodeField="getNumOfColumns" protoField="getNumOfColumns"/>
						<connect nodeField="getHGap" protoField="getHGap"/>
						<connect nodeField="getVGap" protoField="getVGap"/>
						<connect nodeField="doCompressHorizontally" protoField="doCompressHorizontally"/>
						<connect nodeField="doCompressVertically" protoField="doCompressVertically"/>
					</IS>
					
				<![CDATA[
					ecmascript:

					function initialize() {
						getNumOfRows = numOfRows;
						getNumOfColumns = numOfColumns;
						getHGap = hGap;
						getVGap = vGap;
						doCompressHorizontally = compressHorizontally;
						doCompressVertically = compressVertically;
					}
				]]>
				</Script>
			</ProtoBody>
		</ProtoDeclare>
		
	</Scene>
</X3D>