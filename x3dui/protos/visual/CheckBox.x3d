<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN"   "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D profile="Full">
	<head />
	<Scene>		
	
		<ExternProtoDeclare name="Rectangle" url='"Rectangle.x3d#Rectangle"'>
			<field name="settings" type="SFNode" accessType="inputOnly" />
			<field name="setup" type="SFBool" accessType="inputOnly" />
			<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
			
			<field name="movable" type="SFBool" accessType="initializeOnly" />
			<field name="position" type="SFVec2f" accessType="initializeOnly" />
			
			<field name="isMovable" type="SFBool" accessType="outputOnly" />
			<field name="getPosition" type="SFVec2f" accessType="outputOnly" />
			
			<field name="setMovable" type="SFBool" accessType="inputOnly" />
			<field name="setPosition" type="SFVec2f" accessType="inputOnly" />
			
			<field name="children" type="MFNode" accessType="initializeOnly"></field>
			<field name="size" type="SFVec2f" accessType="initializeOnly" />
			<field name="visible" type="SFBool" accessType="initializeOnly" />
			<field name="color" type="SFColor" accessType="initializeOnly" />
			<field name="transparency" type="SFFloat" accessType="initializeOnly" />
			<field name="border" type="SFString" accessType="initializeOnly" />
			
			<field name="getSize" type="SFVec2f" accessType="outputOnly" />
			<field name="isVisible" type="SFBool" accessType="outputOnly" />
			<field name="getColor" type="SFColor" accessType="outputOnly" />
			<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
			<field name="getBorder" type="SFString" accessType="outputOnly" />
			
			<field name="setSize" type="SFVec2f" accessType="inputOnly" />
			<field name="setVisible" type="SFBool" accessType="inputOnly" />
			<field name="setColor" type="SFColor" accessType="inputOnly" />
			<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
			<field name="setBorder" type="SFString" accessType="inputOnly" />
		</ExternProtoDeclare>
	
		<!-- This prototype implements a check box object. -->
		<ProtoDeclare name="CheckBox">
			<ProtoInterface>
				<!-- <proto>Settings</proto> object should be passed in this parameter. -->
				<field name="settings" type="SFNode" accessType="inputOnly"></field>
				<!-- Initializes the component and prepares it for visualization. -->
				<field name="setup" type="SFBool" accessType="inputOnly" />
				<!-- Causes the component to reposition itself and all its children in the z-depth stack. -->
				<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
				
				<!-- Specifies the size of the component. -->
				<field name="size" type="SFVec2f" accessType="initializeOnly" value="0 0" />
				<!-- Specifies whether the component should be visible. -->
				<field name="visible" type="SFBool" accessType="initializeOnly" value="true" />
				<!-- Specifies the transparency level of the component. 
						If the value provided is positive, all children will also be assigned
						the same transparency level; otherwise, only the container object
						will be of the specified transparency. -->
				<field name="transparency" type="SFFloat" accessType="initializeOnly" value="0" />
				<!-- Specifies the text message to be shown with the check box. -->
				<field name="text" type="SFString" accessType="initializeOnly" value="" />
				<!-- Determines if the component will be interactive. -->
				<field name="enabled" type="SFBool" accessType="initializeOnly" value="true" />
				<!-- Specifies if the check box should be initially checked. -->
				<field name="checked" type="SFBool" accessType="initializeOnly" value="false" />
				
				<!-- Returns the size of the component. -->
				<field name="getSize" type="SFVec2f" accessType="outputOnly" />
				<!-- Indicates whether the component is visible. -->
				<field name="isVisible" type="SFBool" accessType="outputOnly" />
				<!-- Returns the component's transparency level. -->
				<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
				<!-- Returns the current caption of the component. -->
				<field name="getText" type="SFString" accessType="outputOnly" />
				<!-- Indicates whether the component is enabled. -->
				<field name="isEnabled" type="SFBool" accessType="outputOnly" />
				<!-- Indicates whether the component is currently checked. -->
				<field name="isChecked" type="SFBool" accessType="outputOnly" />
				<!-- Fires <tt>true</tt> when the user first presses down and then releases 
						the mouse button in the check box area. Unlike <proto>Button</proto>
						and its descendants, no <tt>isPressed</tt> event is available. -->
				<field name="isClicked" type="SFBool" accessType="outputOnly" />
				
				<!-- Sets the size of the component. -->
				<field name="setSize" type="SFVec2f" accessType="inputOnly" />
				<!-- Sets the visibility status of the component. -->
				<field name="setVisible" type="SFBool" accessType="inputOnly" />
				<!-- Sets the component's transparency level. -->
				<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
				<!-- Sets the caption of the component. -->
				<field name="setText" type="SFString" accessType="inputOnly"/>
				<!-- Sets the status of the component. -->
				<field name="setEnabled" type="SFBool" accessType="inputOnly"/>
				<!-- Makes the component either checked or unchecked. -->
				<field name="setChecked" type="SFBool" accessType="inputOnly"/>
			</ProtoInterface>
			<ProtoBody>
				<Transform DEF="checkBoxHolder">
					<TouchSensor DEF="touchSensor" />
					
					<Transform DEF="rectangleHolder">
						<ProtoInstance DEF="rectangle" name="Rectangle">
							<fieldValue name="children">
								<Switch DEF="display" whichChoice="0">
									<Shape>
										<Appearance>
											<Material DEF="radioMaterial" />
										</Appearance>
										<ImageTexture DEF="checkMarkTexture" repeatS="false" repeatT="false" />
										<IndexedFaceSet coordIndex="0 1 2 3 -1" texCoordIndex="0 1 2 3 -1">
											<Coordinate DEF="checkMarkCoords" point="0 0 0, 0 0 0, 0 0 0, 0 0 0" />
										</IndexedFaceSet>
									</Shape>
								</Switch>
							</fieldValue>
							<fieldValue name="border" value="BOTTOM_RIGHT" />
							<fieldValue name="color" value="1 1 1" />
							<IS>				
								<connect nodeField="visible" protoField="visible"/>
								
								<connect nodeField="isVisible" protoField="isVisible"/>
								<connect nodeField="getTransparency" protoField="getTransparency"/>
								
								<connect nodeField="setVisible" protoField="setVisible"/>
							</IS>
						</ProtoInstance>
					</Transform>
					
					<Transform DEF="textHolder">
						<Transform DEF="textScale">
							<Shape>
								<Appearance>
									<Material DEF="textMaterial" diffuseColor="0 0 0" />
								</Appearance>
								<Text DEF="textString" solid="true">
									<FontStyle DEF="textStyle" justify='"BEGIN"' size="11" style="USE_TEXTURE" />
								</Text> 
							</Shape>
						</Transform>
					</Transform>
				</Transform>
				
				<Script DEF="S" directOutput="true">
					<!-- referenced objects -->
					<field name="checkBoxHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="checkBoxHolder" />
					</field>
					<field name="touchSensor" type="SFNode" accessType="initializeOnly">
						<TouchSensor USE="touchSensor" />
					</field>
					<field name="rectangleHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="rectangleHolder" />
					</field>
					<field name="rectangle" type="SFNode" accessType="initializeOnly">
						<Rectangle USE="rectangle" />
					</field>
					<field name="display" type="SFNode" accessType="initializeOnly">
						<Switch USE="display" />
					</field>
					<field name="checkMarkCoords" type="SFNode" accessType="initializeOnly">
						<Coordinate USE="checkMarkCoords" />
					</field>
					<field name="radioMaterial" type="SFNode" accessType="initializeOnly">
						<Material USE="radioMaterial" />
					</field>
					<field name="checkMarkTexture" type="SFNode" accessType="initializeOnly">
						<ImageTexture USE="checkMarkTexture" />
					</field>
					<field name="textHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="textHolder" />
					</field>
					<field name="textScale" type="SFNode" accessType="initializeOnly">
						<Transform USE="textScale" />
					</field>
					<field name="textString" type="SFNode" accessType="initializeOnly">
						<Text USE="textString" />
					</field>
					<field name="textMaterial" type="SFNode" accessType="initializeOnly">
						<Material USE="textMaterial" />
					</field>
					<field name="textStyle" type="SFNode" accessType="initializeOnly">
						<Text USE="textStyle" />
					</field>
					
					<field name="settings" accessType="inputOnly" type="SFNode" />
					<field name="setup" accessType="inputOnly" type="SFBool" />
					<field name="applyZOrder" accessType="inputOnly" type="SFBool" />
					
					<field name="COMPONENT_ID" accessType="inputOutput" type="SFInt32" />

					<!-- attributes of the class -->
					<field name="size" type="SFVec2f" accessType="initializeOnly" />
					<field name="text" type="SFString" accessType="initializeOnly" />
					<field name="enabled" type="SFBool" accessType="initializeOnly" />
					<field name="checked" type="SFBool" accessType="initializeOnly" />
					<field name="transparency" type="SFFloat" accessType="initializeOnly" />
					
					<field name="getSize" type="SFVec2f" accessType="outputOnly" />
					<field name="getText" type="SFString" accessType="outputOnly" />
					<field name="isEnabled" type="SFBool" accessType="outputOnly" />
					<field name="isChecked" type="SFBool" accessType="outputOnly" />
					
					<field name="_setSize" type="SFVec2f" accessType="inputOnly" />
					<field name="_setText" type="SFString" accessType="inputOnly" />
					<field name="_setEnabled" type="SFBool" accessType="inputOnly" />
					<field name="_setChecked" type="SFBool" accessType="inputOnly" />
					<field name="_setTransparency" type="SFFloat" accessType="inputOnly" />
					
					<field name="onClick" type="SFBool" accessType="inputOnly" />
					<field name="isPressed" type="SFBool" accessType="outputOnly" />
					<field name="isClicked" type="SFBool" accessType="outputOnly" />
					
					<field name="INITIALIZED" accessType="inputOutput" type="SFBool" />
					
					<IS>
						<connect nodeField="settings" protoField="settings"/>
						<connect nodeField="setup" protoField="setup"/>
						<connect nodeField="applyZOrder" protoField="applyZOrder"/>
						
						<connect nodeField="size" protoField="size"/>
						<connect nodeField="text" protoField="text"/>
						<connect nodeField="enabled" protoField="enabled"/>
						<connect nodeField="checked" protoField="checked"/>
						<connect nodeField="transparency" protoField="transparency"/>
						
						<connect nodeField="getSize" protoField="getSize"/>
						<connect nodeField="getText" protoField="getText"/>
						<connect nodeField="isEnabled" protoField="isEnabled"/>
						<connect nodeField="isChecked" protoField="isChecked"/>
						<connect nodeField="isClicked" protoField="isClicked"/>
						
						<connect nodeField="_setSize" protoField="setSize"/>
						<connect nodeField="_setText" protoField="setText"/>
						<connect nodeField="_setEnabled" protoField="setEnabled"/>
						<connect nodeField="_setChecked" protoField="setChecked"/>
						<connect nodeField="_setTransparency" protoField="setTransparency"/>
					</IS>
				<![CDATA[
					ecmascript:

					function initialize() {
					}

					function setup() {
						INITIALIZED = false;
										
						rectangle.settings = settings;
						rectangle.setup = true;
					
						COMPONENT_ID = settings.COMPONENT_ID++;
					
						if (settings.DEBUG) print("check box setup(" + COMPONENT_ID + ")");
					
						setSize(size);
						setText(text);
						setEnabled(enabled);
						setChecked(checked);
						setTransparency(transparency);
						
						setAppearance();
						
						INITIALIZED = true;
						
						setSize(getSize);
					}
					
					function applyZOrder() {
						rectangle.applyZOrder = true;
						
						if (settings.DEBUG) print("\tcheck box applyZOrder(" + settings.Z_ORDER_COUNT + ")");
					}
					
					function setAppearance() {
						checkBoxHolder.translation.z = settings.TOUCH_SENSOR_ELEVATION;
						
						rectangle.setSize = new SFVec2f(settings.DEFAULT_CHOICE_ELEMENT_DIMENSION, settings.DEFAULT_CHOICE_ELEMENT_DIMENSION);
							
						checkMarkTexture.url[0] = settings.IMAGES_DIR + "checkMark.png";
							
						checkMarkCoords.point[0] = new SFVec3f(0, -settings.DEFAULT_CHOICE_ELEMENT_DIMENSION, 0);
						checkMarkCoords.point[1] = new SFVec3f(settings.DEFAULT_CHOICE_ELEMENT_DIMENSION, -settings.DEFAULT_CHOICE_ELEMENT_DIMENSION, 0);
						checkMarkCoords.point[2] = new SFVec3f(settings.DEFAULT_CHOICE_ELEMENT_DIMENSION, 0, 0);
						checkMarkCoords.point[3] = new SFVec3f(0, 0, 0);
						
						textHolder.translation.x = settings.DEFAULT_CHOICE_ELEMENT_DIMENSION + settings.DEFAULT_DECORATION_GAP;
						textHolder.translation.y = -settings.DEFAULT_FONT_SCALE * settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_VER_ADJUST_FACTOR;
						textScale.scale = new SFVec3f(
							settings.DEFAULT_FONT_SCALE, 
							settings.DEFAULT_FONT_SCALE,
							settings.DEFAULT_FONT_SCALE);
							
						textStyle.family = settings.DEFAULT_FONT_FAMILY;
						textStyle.size = settings.DEFAULT_FONT_SIZE;
					}
					
					function _setSize(newSize) {
						if (INITIALIZED) {
							setSize(newSize);
						}
					}
					
					function setSize(newSize) {
						if (textHolder.getBBox() != null && textHolder.getBBox() != 0) {
							var bbox = textHolder.getBBox();
								
							var width = bbox[1].x - bbox[0].x;
							var height = bbox[1].y - bbox[0].y;
							
							if (newSize.x < width + settings.DEFAULT_CHOICE_ELEMENT_DIMENSION + settings.DEFAULT_DECORATION_GAP) {
								newSize.x = width + settings.DEFAULT_CHOICE_ELEMENT_DIMENSION + settings.DEFAULT_DECORATION_GAP;
							}
							
							var minHeight = height > settings.DEFAULT_CHOICE_ELEMENT_DIMENSION ? height : settings.DEFAULT_CHOICE_ELEMENT_DIMENSION;
							
							if (newSize.y < minHeight) {
								newSize.y = minHeight;
							}
							
							getSize = newSize;
						} else {
							if (newSize.x < settings.DEFAULT_CHOICE_ELEMENT_DIMENSION) {
								newSize.x = settings.DEFAULT_CHOICE_ELEMENT_DIMENSION;
							}
							
							if (newSize.y < settings.DEFAULT_CHOICE_ELEMENT_DIMENSION) {
								newSize.y = settings.DEFAULT_CHOICE_ELEMENT_DIMENSION;
							}
							
							getSize = newSize;
						}
						
						rectangleHolder.translation.y = -(getSize.y - settings.DEFAULT_CHOICE_ELEMENT_DIMENSION) / 2;
						
						if (INITIALIZED) {
							setText(getText);
						}
					}
					
					function _setTransparency(newTransparency) {
						if (INITIALIZED) {
							setTransparency(newTransparency);
						}
					}
					
					function setTransparency(newTransparency) {
						newTransparency = Math.abs(newTransparency);
					
						rectangle.setTransparency = newTransparency;
						textMaterial.transparency = newTransparency;
						radioMaterial.transparency = newTransparency;
					}
					
					function _setText(newText) {
						if (INITIALIZED) {
							setText(newText);
						}
					}
					
					function setText(newText) {
						getText = newText;

						textScale.scale = new SFVec3f(
							settings.DEFAULT_FONT_SCALE, 
							settings.DEFAULT_FONT_SCALE,
							settings.DEFAULT_FONT_SCALE);
							
						textStyle.size = settings.DEFAULT_FONT_SIZE;
						textStyle.family = settings.DEFAULT_FONT_FAMILY;
					
						textString.string = new MFString(getText);
					
						var textBBox;
						var textWidth = 0;
						var textAreaWidth = getSize.x - settings.DEFAULT_CHOICE_ELEMENT_DIMENSION;
						var textAreaHeight = getSize.y;
						
						if (newText != "") {
							textBBox = textHolder.getBBox();
							textWidth = textBBox[1].x - textBBox[0].x;
							
							var i = newText.length - 1;

							while(textAreaWidth < textWidth + 2 * settings.DEFAULT_DECORATION_GAP && i >= 0) {
								newText = new SFString(newText.substring(0, i) + "...");
								textString.string = new MFString(newText);
								
								textBBox = textHolder.getBBox();
								textWidth = textBBox[1].x - textBBox[0].x;
								
								i--;
							}
						}
						
						textHolder.translation.x = settings.DEFAULT_CHOICE_ELEMENT_DIMENSION + settings.DEFAULT_DECORATION_GAP;
						textHolder.translation.y = -(textAreaHeight + settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_SCALE * 2 / 3) / 2;
					}
					
					function _setEnabled(newEnabled) {
						if (INITIALIZED) {
							setEnabled(newEnabled);
						}
					}
					
					function setEnabled(newEnabled) {
						isEnabled = newEnabled;

						rectangle.setColor = isEnabled ? settings.DEFAULT_ENABLED_INPUT_BG_COLOR : settings.DEFAULT_DISABLED_INPUT_BG_COLOR;
						textMaterial.diffuseColor = isEnabled ? settings.DEFAULT_ENABLED_TEXT_COLOR : settings.DEFAULT_DISABLED_TEXT_COLOR;
						
						touchSensor.enabled = isEnabled;
					}

					function _setChecked(newChecked) {
						if (INITIALIZED) {
							setChecked(newChecked);
						}
					}

					function setChecked(newChecked) {
						isChecked = newChecked;

						display.whichChoice = (isChecked ? 0 : -1);
					}

					function onClick(clicked) {
						isPressed = clicked;
					
						if (!isPressed && touchSensor.isOver) {
							if (isEnabled) {
								setChecked(!isChecked);
							}
							
							isClicked = true;
						}
						
						if (isEnabled) {
							if (isPressed) {
								rectangle.setColor = settings.DEFAULT_DISABLED_INPUT_BG_COLOR;
							} else {
								rectangle.setColor = settings.DEFAULT_ENABLED_INPUT_BG_COLOR;
							}
						}
					}
				]]>
				</Script>
				
				<ROUTE fromNode="touchSensor" fromField="isActive" toNode="S" toField="onClick" />
			</ProtoBody>
		</ProtoDeclare>
		
	</Scene>
</X3D>