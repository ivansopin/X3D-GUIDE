<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN"   "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D profile="Full">
	<head />
	<Scene>	
	
		<!-- Supplementary prototype to <proto>HorizontalSlider</proto>. This
				prototype should not be instantiated on its own. -->
		<ProtoDeclare name="HorizontalRunner">
			<ProtoInterface>
				<!-- <proto>Settings</proto> object should be passed in this parameter. -->
				<field name="settings" type="SFNode" accessType="inputOnly"></field>
				<!-- Initializes the component and prepares it for visualization. -->
				<field name="setup" type="SFBool" accessType="inputOnly" />
				<!-- Causes the component to reposition itself and all its children in the z-depth stack. -->
				<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
				
				<!-- Specifies the size of the component. -->
				<field name="size" type="SFVec2f" accessType="initializeOnly" value="0 0" />
				<!-- Specifies whether the component should be visible. -->
				<field name="visible" type="SFBool" accessType="initializeOnly" value="true" />
				<!-- Specifies what color the component should be. -->
				<field name="color" type="SFColor" accessType="initializeOnly" value="0.832 0.8164 0.7852" />
				<!-- Specifies the transparency level of the component. 
						If the value provided is positive, all children will also be assigned
						the same transparency level; otherwise, only the container object
						will be of the specified transparency. -->
				<field name="transparency" type="SFFloat" accessType="initializeOnly" value="0" />
				
				<!-- Returns the size of the component. -->
				<field name="getSize" type="SFVec2f" accessType="outputOnly" />
				<!-- Indicates whether the component is visible. -->
				<field name="isVisible" type="SFBool" accessType="outputOnly" />
				<!-- Returns the color of the component. -->
				<field name="getColor" type="SFColor" accessType="outputOnly" />
				<!-- Returns the component's transparency level. -->
				<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
				
				<!-- Sets the size of the component. -->
				<field name="setSize" type="SFVec2f" accessType="inputOnly" />
				<!-- Sets the visibility status of the component. -->
				<field name="setVisible" type="SFBool" accessType="inputOnly" />
				<!-- Sets the color of the component. -->
				<field name="setColor" type="SFColor" accessType="inputOnly" />
				<!-- Sets the component's transparency level. For more details, 
						refer to <field>transparency</field> parameter. -->
				<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
			</ProtoInterface>
			<ProtoBody>
				<Group>
					<Switch DEF="display" whichChoice="0">
						<OrderedGroup DEF="orderedGroup">
							<!-- the main frame area -->							
							<Group>
								<Shape>
									<Appearance>
										<Material DEF="boxMaterial">
											<IS>
												<connect nodeField="transparency" protoField="transparency"/>
											</IS>
										</Material>
									</Appearance>
									<IndexedFaceSet colorIndex="0 0 0 0 0 0" coordIndex="0 1 2 3 4 -1">
										<Coordinate DEF="boxCoords" point="0 0 0, 0 0 0, 0 0 0, 0 0 0, 0 0 0"/>
										<Color DEF="boxColors" color="0 0 0" />
									</IndexedFaceSet>
								</Shape>
							</Group>
							
							<Group>
								<Shape>
									<Appearance>
										<Material USE="boxMaterial" />
									</Appearance>
									<IndexedLineSet colorIndex="0 0 0 0 0 0 1 1 1 1 1 1 0 0 0" coordIndex="0 1 -1 1 2 -1 2 3 -1 3 4 -1 4 0 -1">
										<Coordinate DEF="lineCoords" point="0 0 0, 0 0 0, 0 0 0, 0 0 0, 0 0 0"/>
										<Color DEF="lineColors" color="0 0 0, 0 0 0"/>
									</IndexedLineSet>
								</Shape>
							</Group>
						</OrderedGroup>
					</Switch>
				</Group>
				
				<Script DEF="S" directOutput="true">
					<!-- referenced objects -->
					<field name="display" type="SFNode" accessType="initializeOnly">
						<Switch USE="display" />
					</field>
					<field name="boxMaterial" type="SFNode" accessType="initializeOnly">
						<Material USE="boxMaterial" />
					</field>
					<field name="boxColors" type="SFNode" accessType="initializeOnly">
						<Color USE="boxColors" />
					</field>
					<field name="lineColors" type="SFNode" accessType="initializeOnly">
						<Color USE="lineColors" />
					</field>
					<field name="boxCoords" type="SFNode" accessType="initializeOnly">
						<Coordinate USE="boxCoords" />
					</field>
					<field name="lineCoords" type="SFNode" accessType="initializeOnly">
						<Coordinate USE="lineCoords" />
					</field>
					<field name="orderedGroup" type="SFNode" accessType="initializeOnly">
						<OrderedGroup USE="orderedGroup" />
					</field>
					
					<field name="settings" accessType="inputOnly" type="SFNode" />
					<field name="setup" accessType="inputOnly" type="SFBool" />
					<field name="applyZOrder" accessType="inputOnly" type="SFBool" />
					
					<!-- constants -->
					<field name="COMPONENT_ID" accessType="inputOutput" type="SFInt32" />

					<!-- attributes of the class -->
					<field name="visible" type="SFBool" accessType="inputOutput" />
					<field name="color" type="SFColor" accessType="inputOutput" />
					<field name="transparency" type="SFFloat" accessType="inputOutput" />
					<field name="size" type="SFVec2f" accessType="inputOutput" />
					
					<field name="INITIALIZED" accessType="inputOutput" type="SFBool" />
					
					<!-- methods of the class -->
					<field name="isVisible" type="SFBool" accessType="outputOnly" />
					<field name="getColor" type="SFColor" accessType="outputOnly" />
					<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
					<field name="getSize" type="SFVec2f" accessType="outputOnly" />
					
					<field name="_setVisible" type="SFBool" accessType="inputOnly" />
					<field name="_setColor" type="SFColor" accessType="inputOnly" />
					<field name="_setTransparency" type="SFFloat" accessType="inputOnly" />
					<field name="_setSize" type="SFVec2f" accessType="inputOnly" />
					
					<IS>
						<connect nodeField="settings" protoField="settings"/>
						<connect nodeField="setup" protoField="setup"/>
						<connect nodeField="applyZOrder" protoField="applyZOrder"/>
						
						<connect nodeField="visible" protoField="visible"/>
						<connect nodeField="color" protoField="color"/>
						<connect nodeField="transparency" protoField="transparency"/>
						<connect nodeField="size" protoField="size"/>
						
						<connect nodeField="isVisible" protoField="isVisible"/>
						<connect nodeField="getColor" protoField="getColor"/>
						<connect nodeField="getTransparency" protoField="getTransparency"/>
						<connect nodeField="getSize" protoField="getSize"/>
						
						<connect nodeField="_setVisible" protoField="setVisible"/>
						<connect nodeField="_setColor" protoField="setColor"/>
						<connect nodeField="_setTransparency" protoField="setTransparency"/>
						<connect nodeField="_setSize" protoField="setSize"/>
					</IS>
				<![CDATA[
					ecmascript:
				
					function initialize() {
					}
					
					function setup(ds) {
						INITIALIZED = false;
												
						COMPONENT_ID = settings.COMPONENT_ID++;
						
						if (settings.DEBUG) print("rectangle setup(" + COMPONENT_ID + ")");
						
						setVisible(visible);
						setColor(color);
						setTransparency(transparency);
						setSize(size);
						setBorder();
						
						INITIALIZED = true;
					}
					
					function applyZOrder() {
						if (settings.DEBUG) print("\trectangle applyZOrder(" + settings.Z_ORDER_COUNT + ")");
					
						var l = orderedGroup.children.length;

						for (var i = 0; i < l; i++) {
							orderedGroup.order[i] = settings.Z_ORDER_COUNT + i * settings.Z_ORDER_STEP;
						}
						
						settings.Z_ORDER_COUNT++;
					}
					
					function _setVisible(newVisible) {
						if (INITIALIZED) {
							setVisible(newVisible);
						}
					}
					
					function setVisible(newVisible) {
						isVisible = newVisible;
						
						display.whichChoice = (isVisible ? 0 : -1);
					}
					
					function _setColor(newColor) {
						if (INITIALIZED) {
							setColor(newColor);
						}
					}
					
					function setColor(newColor) {
						getColor = newColor;
						
						boxColors.color[0] = getColor;
					}
					
					function _setTransparency(newTransparency) {
						if (INITIALIZED) {
							setTransparency(newTransparency);
						}
					}
					
					function setTransparency(newTransparency) {
						getTransparency = newTransparency;
						
						boxMaterial.transparency = newTransparency;
					}
					
					function _setSize(newSize) {
						if (INITIALIZED) {
							setSize(newSize);
						}
					}
					
					function setSize(newSize) {
						getSize = newSize;
						
						boxCoords.point[0] = new SFVec3f(0, 0, 0);
						boxCoords.point[1] = new SFVec3f(0, -2 / 3 * getSize.y, 0);
						boxCoords.point[2] = new SFVec3f(getSize.x / 2, -getSize.y, 0);
						boxCoords.point[3] = new SFVec3f(getSize.x, -2 / 3 * getSize.y, 0);
						boxCoords.point[4] = new SFVec3f(getSize.x, 0, 0);

						if (INITIALIZED) {
							setBorder();
						}
					}
					
					function setBorder() {
						lineCoords.point[0] = new SFVec3f(0, 0, 0);
						lineCoords.point[1] = new SFVec3f(0, -2 / 3 * getSize.y, 0);
						lineCoords.point[2] = new SFVec3f(getSize.x / 2, -getSize.y, 0);
						lineCoords.point[3] = new SFVec3f(getSize.x, -2 / 3 * getSize.y, 0);
						lineCoords.point[4] = new SFVec3f(getSize.x, 0, 0);
						
						lineColors.color[0] = settings.DEFAULT_RECTANGLE_BORDER_BRIGHT_COLOR;
						lineColors.color[1] = settings.DEFAULT_RECTANGLE_BORDER_DARK_COLOR;
					}
				]]>
				</Script>
			</ProtoBody>
		</ProtoDeclare>

	</Scene>
</X3D>