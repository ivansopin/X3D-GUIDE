<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.2//EN"   "http://www.web3d.org/specifications/x3d-3.2.dtd">
<X3D profile="Immersive" version="3.2" xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.2.xsd">
	<head />
	<Scene>		
	
		<ExternProtoDeclare name="Rectangle" url='"Rectangle.x3d#Rectangle"'>
			<field name="settings" type="SFNode" accessType="inputOnly" />
			<field name="setup" type="SFBool" accessType="inputOnly" />
			<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
			
			<field name="movable" type="SFBool" accessType="initializeOnly" />
			<field name="position" type="SFVec2f" accessType="initializeOnly" />
			
			<field name="isMovable" type="SFBool" accessType="outputOnly" />
			<field name="getPosition" type="SFVec2f" accessType="outputOnly" />
			
			<field name="setMovable" type="SFBool" accessType="inputOnly" />
			<field name="setPosition" type="SFVec2f" accessType="inputOnly" />
			
			<field name="children" type="MFNode" accessType="initializeOnly"></field>
			<field name="size" type="SFVec2f" accessType="initializeOnly" />
			<field name="visible" type="SFBool" accessType="initializeOnly" />
			<field name="color" type="SFColor" accessType="initializeOnly" />
			<field name="transparency" type="SFFloat" accessType="initializeOnly" />
			<field name="border" type="SFString" accessType="initializeOnly" />
			
			<field name="getSize" type="SFVec2f" accessType="outputOnly" />
			<field name="isVisible" type="SFBool" accessType="outputOnly" />
			<field name="getColor" type="SFColor" accessType="outputOnly" />
			<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
			<field name="getBorder" type="SFString" accessType="outputOnly" />
			
			<field name="setSize" type="SFVec2f" accessType="inputOnly" />
			<field name="setVisible" type="SFBool" accessType="inputOnly" />
			<field name="setColor" type="SFColor" accessType="inputOnly" />
			<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
			<field name="setBorder" type="SFString" accessType="inputOnly" />
		</ExternProtoDeclare>

		<ExternProtoDeclare name="Panel" url='"Panel.x3d#Panel"'>
			<field name="settings" type="SFNode" accessType="inputOnly"></field>
			<field name="setup" type="SFBool" accessType="inputOnly" />
			<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
			<field name="children" type="MFNode" accessType="initializeOnly"></field>
			<field name="size" type="SFVec2f" accessType="initializeOnly" />
			<field name="visible" type="SFBool" accessType="initializeOnly" />
			<field name="color" type="SFColor" accessType="initializeOnly" />
			<field name="transparency" type="SFFloat" accessType="initializeOnly" />
			<field name="text" type="SFString" accessType="initializeOnly" />
			<field name="getSize" type="SFVec2f" accessType="outputOnly" />
			<field name="isVisible" type="SFBool" accessType="outputOnly" />
			<field name="getColor" type="SFColor" accessType="outputOnly" />
			<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
			<field name="getText" type="SFString" accessType="outputOnly" />
			<field name="setSize" type="SFVec2f" accessType="inputOnly" />
			<field name="setVisible" type="SFBool" accessType="inputOnly" />
			<field name="setColor" type="SFColor" accessType="inputOnly" />
			<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
			<field name="layout" type="SFNode" accessType="initializeOnly" />
			<field name="border" type="SFString" accessType="initializeOnly" />
			<field name="getBorder" type="SFString" accessType="outputOnly" />
			<field name="doLayout" type="SFBool" accessType="inputOnly" />
			<field name="setBorder" type="SFString" accessType="inputOnly" />
			<field name="setText" type="SFString" accessType="inputOnly" />
		</ExternProtoDeclare>
	
	
		<!-- This prototype implements a tab panel control to switch among several panels. -->
		<ProtoDeclare name="TabPanel">
			<ProtoInterface>
				<!-- <proto>Settings</proto> object should be passed in this parameter. -->
				<field name="settings" type="SFNode" accessType="inputOnly"></field>
				<!-- Initializes the component and prepares it for visualization. -->
				<field name="setup" type="SFBool" accessType="inputOnly" />
				<!-- Causes the component to reposition itself and all its children in the z-depth stack. -->
				<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
				
				<!-- Accepts X3DUI nodes to be displayed within this component -->
				<field name="children" type="MFNode" accessType="initializeOnly"></field>
				<!-- Specifies the size of the component. -->
				<field name="size" type="SFVec2f" accessType="initializeOnly" value="0 0" />
				<!-- Specifies whether the component should be visible. -->
				<field name="visible" type="SFBool" accessType="initializeOnly" value="true" />
				<!-- Specifies what color the component should be. -->
				<field name="color" type="SFColor" accessType="initializeOnly" value="0.832 0.8164 0.7852" />
				<!-- Specifies the transparency level of the component. 
						If the value provided is positive, all children will also be assigned
						the same transparency level; otherwise, only the container object
						will be of the specified transparency. -->
				<field name="transparency" type="SFFloat" accessType="initializeOnly" value="0" />
				<!-- Specifies the index of the initially selected tab. The index
						should be positive and not bigger than the number of 
						<field>children</field>. -->
				<field name="selectedIndex" type="SFInt32" accessType="initializeOnly" value="0" />
				
				<!-- Returns the size of the component. -->
				<field name="getSize" type="SFVec2f" accessType="outputOnly" />
				<!-- Indicates whether the component is visible. -->
				<field name="isVisible" type="SFBool" accessType="outputOnly" />
				<!-- Returns the color of the component. -->
				<field name="getColor" type="SFColor" accessType="outputOnly" />
				<!-- Returns the component's transparency level. -->
				<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
				<!-- Returns the index of the currently selected item, 
						or -1 if no item is selected. -->
				<field name="getSelectedIndex" type="SFInt32" accessType="outputOnly" />
				
				<!-- Sets the size of the component. -->
				<field name="setSize" type="SFVec2f" accessType="inputOnly" />
				<!-- Sets the visibility status of the component. -->
				<field name="setVisible" type="SFBool" accessType="inputOnly" />
				<!-- Sets the color of the component. -->
				<field name="setColor" type="SFColor" accessType="inputOnly" />
				<!-- Sets the component's transparency level. -->
				<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
				<!-- Sets the index of the item to select. -->
				<field name="setSelectedIndex" type="SFInt32" accessType="inputOnly" />
			</ProtoInterface>
			<ProtoBody>
				<Transform>
					<ProtoInstance DEF="rectangle" name="Rectangle">
						<fieldValue name="children">
							<OrderedGroup DEF="orderedGroup">
								<Transform DEF="headersHolder">
									<OrderedGroup DEF="orderedGroup2">
									</OrderedGroup>
								</Transform>
								
								<Transform DEF="childrenRectangleHolder">
									<ProtoInstance DEF="childrenRectangle" name="Rectangle">
										<fieldValue name="children">
											<Transform DEF="childrenHolder">
												<Switch DEF="display">
													<IS>
														<connect nodeField="children" protoField="children"/>
													</IS>
												</Switch>
											</Transform>
										</fieldValue>
										<IS>
											<connect nodeField="visible" protoField="visible"/>
											<connect nodeField="color" protoField="color"/>
						
											<connect nodeField="setVisible" protoField="setVisible"/>
											<connect nodeField="setColor" protoField="setColor"/>
										</IS>
										<fieldValue name="border" value="TOP_LEFT_NO_TOP" />
									</ProtoInstance>
								</Transform>
								
								<Transform DEF="lineHolder">
									<Shape>
										<Appearance>
											<Material DEF="lineMaterial" />
										</Appearance>
										<IndexedLineSet colorIndex="0 0 0 1 1 1 2 2 2" coordIndex="0 1 -1 1 2 -1 2 3 -1">
											<Coordinate DEF="lineCoords" point="0 0 0, 0 0 0, 0 0 0, 0 0 0"/>
											<Color DEF="lineColors" color="0 0 0, 0 0 0, 0 0 0"/>
										</IndexedLineSet>
									</Shape>
								</Transform>
							</OrderedGroup>
						</fieldValue>
						<IS>
							<connect nodeField="visible" protoField="visible"/>
							<connect nodeField="color" protoField="color"/>
							
							<connect nodeField="getSize" protoField="getSize"/>
							<connect nodeField="isVisible" protoField="isVisible"/>
							<connect nodeField="getColor" protoField="getColor"/>
							<connect nodeField="getTransparency" protoField="getTransparency"/>
	
							<connect nodeField="setVisible" protoField="setVisible"/>
							<connect nodeField="setColor" protoField="setColor"/>
						</IS>
						<fieldValue name="border" value="NONE" />
					</ProtoInstance>
				</Transform>
				
				<Script DEF="S" directOutput="true">
					<!-- referenced objects -->
					<field name="rectangle" type="SFNode" accessType="initializeOnly">
						<Rectangle USE="rectangle" />
					</field>
					<field name="orderedGroup" type="SFNode" accessType="initializeOnly">
						<OrderedGroup USE="orderedGroup" />
					</field>
					<field name="childrenRectangle" type="SFNode" accessType="initializeOnly">
						<Rectangle USE="childrenRectangle" />
					</field>
					<field name="headersHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="headersHolder" />
					</field>
					<field name="orderedGroup2" type="SFNode" accessType="initializeOnly">
						<OrderedGroup USE="orderedGroup2" />
					</field>
					<field name="lineHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="lineHolder" />
					</field>
					<field name="lineMaterial" type="SFNode" accessType="initializeOnly">
						<Material USE="lineMaterial" />
					</field>
					<field name="lineColors" type="SFNode" accessType="initializeOnly">
						<Color USE="lineColors" />
					</field>
					<field name="lineCoords" type="SFNode" accessType="initializeOnly">
						<Coordinate USE="lineCoords" />
					</field>
					<field name="childrenRectangleHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="childrenRectangleHolder" />
					</field>
					<field name="childrenHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="childrenHolder" />
					</field>
					<field name="display" type="SFNode" accessType="initializeOnly">
						<Switch USE="display" />
					</field>
			
					<field name="settings" accessType="inputOnly" type="SFNode" />
					<field name="setup" accessType="inputOnly" type="SFBool" />
					<field name="applyZOrder" accessType="inputOnly" type="SFBool" />
					
					<field name="COMPONENT_ID" accessType="inputOutput" type="SFInt32" />
					
					<!-- attributes of the class -->
					<field name="size" type="SFVec2f" accessType="initializeOnly" />
					<field name="transparency" type="SFFloat" accessType="initializeOnly" />
					<field name="selectedIndex" type="SFInt32" accessType="initializeOnly" />
					
					<field name="getSelectedIndex" type="SFInt32" accessType="outputOnly" />

					<field name="_setSize" type="SFVec2f" accessType="inputOnly" />
					<field name="_setTransparency" type="SFFloat" accessType="inputOnly" />
					<field name="_setSelectedIndex" type="SFInt32" accessType="inputOnly" />
					
					<field name="tabIsClicked" type="SFBool" accessType="inputOnly" />
					
					<field name="headerHeight" type="SFFloat" accessType="inputOutput" />
					<field name="orderCount" type="SFFloat" accessType="inputOutput" />
					
					<field name="INITIALIZED" accessType="inputOutput" type="SFBool" />
					
					<IS>
						<connect nodeField="settings" protoField="settings"/>
						<connect nodeField="setup" protoField="setup"/>
						<connect nodeField="applyZOrder" protoField="applyZOrder"/>

						<connect nodeField="size" protoField="size"/>
						<connect nodeField="transparency" protoField="transparency"/>
						<connect nodeField="selectedIndex" protoField="selectedIndex"/>
						
						<connect nodeField="getSelectedIndex" protoField="getSelectedIndex"/>

						<connect nodeField="_setSize" protoField="setSize"/>
						<connect nodeField="_setTransparency" protoField="setTransparency"/>
						<connect nodeField="_setSelectedIndex" protoField="setSelectedIndex"/>
					</IS>
				<![CDATA[
					ecmascript:

					function initialize() {
					}

					function setup() {
						INITIALIZED = false;
										
						rectangle.settings = settings;
						rectangle.setup = true;
						childrenRectangle.settings = settings;
						childrenRectangle.setup = true;
					
						COMPONENT_ID = settings.COMPONENT_ID++;
					
						if (settings.DEBUG) print("tab panel setup(" + COMPONENT_ID + ")");
					
						var l = display.children.length;
						
						for (var i = 0; i < l; i++) {
							if (display.children[i].hasEventIn("settings")) {
								display.children[i].settings = settings;
							}
							
							if (display.children[i].hasEventIn("setup")) {
								display.children[i].setup = true;
							}
						}
					
						setHeaderHeight();
						setTransparency(transparency);
						setSize(size);
						
						setAppearance();
						setLine();
						headersSetup();
						setText();
						
						setSelectedIndex(selectedIndex);
						
						INITIALIZED = true;
						
						setSize(rectangle.getSize);
					}
					
					function applyZOrder() {
						rectangle.applyZOrder = true;
						childrenRectangle.applyZOrder = true;
						
						if (settings.DEBUG) print("\ttab panel applyZOrder(" + settings.Z_ORDER_COUNT + ")");
					
						var l = display.children.length;

						for (var i = 0; i < l; i++) {
							if (headersHolder.children[0].children[i].children[1].hasEventIn("applyZOrder")) {
								headersHolder.children[0].children[i].children[1].applyZOrder = true;
							}
						}
						
						for (var i = 0; i < l; i++) {
							if (headersHolder.children[0].children[i].children[1].children[0].children[0].hasEventIn("applyZOrder")) {
								headersHolder.children[0].children[i].children[1].children[0].children[0].applyZOrder = true;
							}
						}
						
						for (var i = 0; i < l; i++) {
							if (display.children[i].hasEventIn("applyZOrder")) {
								display.children[i].applyZOrder = true;
							}
						}

						applyZOrderToHeadersAndPanels(settings.Z_ORDER_COUNT);
						
						orderCount = settings.Z_ORDER_COUNT;
						
						settings.Z_ORDER_COUNT++;
					}
					
					function applyZOrderToHeadersAndPanels(zOrderCount) {
						var l = orderedGroup2.children.length;

						for (var i = 0; i < l; i++) {
							orderedGroup2.order[i] = zOrderCount + i * settings.Z_ORDER_STEP;
						}
						
						if (getSelectedIndex >= 0) {
							orderedGroup2.order[getSelectedIndex] = zOrderCount + l * settings.Z_ORDER_STEP;
						}
						
						var m = orderedGroup.children.length;
						
						for (var i = 0; i < m; i++) {
							orderedGroup.order[i] = zOrderCount + (l + i) * settings.Z_ORDER_STEP;
						}
					}
					
					function setHeaderHeight() {
						headerHeight = 
							settings.DEFAULT_TAB_PANEL_HEADER_HEIGHT > settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_SCALE + settings.DEFAULT_DECORATION_GAP ?
							settings.DEFAULT_TAB_PANEL_HEADER_HEIGHT : settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_SCALE + settings.DEFAULT_DECORATION_GAP;
					}
					
					function setLine() {
						lineColors.color[0] = settings.DEFAULT_RECTANGLE_BORDER_BRIGHT_COLOR;
						lineColors.color[1] = childrenRectangle.getColor;
						lineColors.color[2] = settings.DEFAULT_RECTANGLE_BORDER_BRIGHT_COLOR;
						
						lineCoords.point[0] = new SFVec3f(0, 0, 0);
						lineCoords.point[1] = new SFVec3f(0, 0, 0);
						lineCoords.point[2] = new SFVec3f(rectangle.getSize.x, 0, 0);
						lineCoords.point[3] = new SFVec3f(rectangle.getSize.x, 0, 0);
						
						// TODO: find out why the elevation has to be so high
						lineHolder.translation.y = -headerHeight - settings.DEFAULT_DECORATION_GAP;
						lineHolder.translation.z = settings.TOUCH_SENSOR_ELEVATION;
					}
					
					function _setSelectedIndex(newSelectedIndex) {
						if (INITIALIZED) {
							setSelectedIndex(newSelectedIndex);
						}
					}
					
					function setSelectedIndex(newSelectedIndex) {
						if (newSelectedIndex >= 0 && newSelectedIndex < display.children.length) {
							if (newSelectedIndex != getSelectedIndex || !INITIALIZED) {
								getSelectedIndex = newSelectedIndex;
								
								selectTab(getSelectedIndex);
							}
						}
					}
					
					function headersSetup() {
						settings.COMPONENT_ID = COMPONENT_ID + 1;
					
						if (settings.DEBUG) print("tab panel setup(" + COMPONENT_ID + ")");
					
						var l = headersHolder.children[0].children.length;
						
						for (var i = 0; i < l; i++) {
							if (headersHolder.children[0].children[i].children[1].hasEventIn("settings")) {
								headersHolder.children[0].children[i].children[1].settings = settings;
							}
							
							if (headersHolder.children[0].children[i].children[1].hasEventIn("setup")) {
								headersHolder.children[0].children[i].children[1].setup = true;
							}
							
							if (headersHolder.children[0].children[i].children[1].children[0].children[0].hasEventIn("settings")) {
								headersHolder.children[0].children[i].children[1].children[0].children[0].settings = settings;
							}
							
							if (headersHolder.children[0].children[i].children[1].children[0].children[0].hasEventIn("setup")) {
								headersHolder.children[0].children[i].children[1].children[0].children[0].setup = true;
							}
						}
					}
					
					function selectTab(index) {
						getSelectedIndex = index;
						
						display.whichChoice = index;
						
						var l = display.children.length;
						var headerWidth = (rectangle.getSize.x - 2 * settings.DEFAULT_DECORATION_GAP - (l - 1) * settings.DEFAULT_ADJACENT_GAP) / l;
						
						var xScale = (headerWidth + 2 * settings.DEFAULT_DECORATION_GAP) / headerWidth;
						var yScale = (headerHeight + settings.DEFAULT_DECORATION_GAP) / headerHeight;
						
						for (var i = 0; i < l; i++) {
							if (i == index) {
								headersHolder.children[0].children[i].translation.x = i * (headerWidth + settings.DEFAULT_ADJACENT_GAP);
								headersHolder.children[0].children[i].translation.y = 0;																
								headersHolder.children[0].children[i].scale = new SFVec3f(xScale, yScale, 1);
								
								lineCoords.point[1] = new SFVec3f(headersHolder.children[0].children[i].translation.x + 0.0001, 0, 0);
								lineCoords.point[2] = new SFVec3f(headersHolder.children[0].children[i].translation.x + headersHolder.children[0].children[i].scale.x * headerWidth - 0.0001, 0, 0);

								if (i == l - 1) {
									lineCoords.point[3] = lineCoords.point[2];
									lineColors.color[2] = settings.DEFAULT_RECTANGLE_BORDER_DARK_COLOR;
								} else {
									lineCoords.point[3] = new SFVec3f(rectangle.getSize.x, 0, 0);
									lineColors.color[2] = settings.DEFAULT_RECTANGLE_BORDER_BRIGHT_COLOR;
								}
							} else {
								headersHolder.children[0].children[i].translation.x = i * (headerWidth + settings.DEFAULT_ADJACENT_GAP) + settings.DEFAULT_DECORATION_GAP;
								headersHolder.children[0].children[i].translation.y = -settings.DEFAULT_DECORATION_GAP;
								headersHolder.children[0].children[i].scale = new SFVec3f(1, 1, 1);
							}
						}
						
						applyZOrderToHeadersAndPanels(orderCount);
					}
					
					function tabIsClicked(active) {
						if (!active) {
							return;
						}
						
						var l = display.children.length;
						
						for (var i = 0; i < l; i++) {
							if (headersHolder.children[0].children[i].children[0].isActive) {
								setSelectedIndex(i);
							}
						}
					}
					
					function setText() {
						var textBBox;
						var textWidth;
						var headerWidth;
						var text;
						
						var l = headersHolder.children[0].children.length;
						var j;
						
						for (var i = 0; i < l; i++) {
							textWidth = 0;
							headerWidth = headersHolder.children[0].children[i].children[1].getSize.x;

							text = headersHolder.children[0].children[i].children[1].children[0].children[0].getText[0];
							
							if (text != "") {
								textBBox = headersHolder.children[0].children[i].children[1].children[0].children[0].getBBox();
								textWidth = textBBox[1].x - textBBox[0].x;
								
								j = text.length - 1;
	
								while (headerWidth < textWidth + 2 * settings.DEFAULT_DECORATION_GAP && j >= 0) {
									text = new SFString(text.substring(0, j) + "...");
								
									headersHolder.children[0].children[i].children[1].children[0].children[0].setText = new MFString(text);
									
									textBBox = headersHolder.children[0].children[i].children[1].children[0].children[0].getBBox();
									textWidth = textBBox[1].x - textBBox[0].x;
									
									j--;
								}
							}
							
							headersHolder.children[0].children[i].children[1].children[0].translation.x = settings.DEFAULT_DECORATION_GAP + (headerWidth - textWidth - 2 * settings.DEFAULT_DECORATION_GAP) / 2;
							//headersHolder.children[0].children[i].children[1].children[0].translation.y = -settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_SCALE * 2 / 6;
						}
					}
					
					function setAppearance() {
						var l = display.children.length;
						
						//var headerWidth = (rectangle.getSize.x - (l + 1) * settings.DEFAULT_DECORATION_GAP) / l;
						var headerWidth = (rectangle.getSize.x - 2 * settings.DEFAULT_DECORATION_GAP - (l - 1) * settings.DEFAULT_ADJACENT_GAP) / l;
						
						headersHolder.translation.z = settings.TOUCH_SENSOR_ELEVATION;
					
						childrenRectangleHolder.translation.y = -headerHeight - settings.DEFAULT_DECORATION_GAP;
						
						childrenHolder.translation.x = settings.DEFAULT_DECORATION_GAP;
						childrenHolder.translation.y = -settings.DEFAULT_DECORATION_GAP;
					
						var vrml;
						var headerPanel;
						var touchSensor;
						var transform;
						
						headersHolder.children[0].children = new MFNode();
						
						for (var i = 0; i < l; i++) {
							vrml = 
								"DEF headerPanel" + i + " Rectangle { " +
									"border \"TOP_LEFT_NO_BOTTOM\" " +
									"size " + headerWidth + " " + headerHeight + " " +
									"children [ " +
										"DEF headerLabelHolder" + i + " Transform { " +
											"translation " +
												"0 " +
												-(headerHeight - settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_SCALE) / 2 + 
												" 0 " +
											"children [ " +
												"DEF headerLabel" + i + " Label { " +
													"size " + 
														headerWidth + " " +
														// this will guarantee to give the label minimum necessary height 
														0 + " " + 
													"text [\"" + display.children[i].getText + "\"] " +
													"justify  \"MIDDLE\" " +
												"} " +
											"] " +
										"} " + 
									"] " +
								"}";
								
							//print(vrml);
								
							headerPanel = Browser.createVrmlFromString(vrml)[0];


							vrml = 
								"DEF touchSensor" + i + " TouchSensor {}";
								
							//print(vrml);
								
							touchSensor = Browser.createVrmlFromString(vrml)[0];

							
							vrml = 
								"DEF headerPanelHolder" + i + " Transform {" +
									"translation  " + 
										(i * (headerWidth + settings.DEFAULT_DECORATION_GAP) + settings.DEFAULT_DECORATION_GAP) + " " + 
										"0 0" +
								"}";
								
							//print(vrml);
								
							transform = Browser.createVrmlFromString(vrml)[0];
								
								
							//headerPanel.children[0] = headerLabel;								
							transform.children[0] = touchSensor;
							transform.children[1] = headerPanel;
							headersHolder.children[0].children[i] = transform;
							
							Browser.deleteRoute(touchSensor, "isActive", Browser.getScript(), "tabIsClicked");
							Browser.addRoute(touchSensor, "isActive", Browser.getScript(), "tabIsClicked");
							
							display.children[i].setBorder = "NONE";
						}
					}
					
					function _setSize(newSize) {
						if (INITIALIZED) {
							setSize(newSize);
						}
					}
					
					function setSize(newSize) {
						var l = display.children.length;
						
						for (var i = 0; i < l; i++) {
							if (display.children[i].getSize.x > newSize.x - 2 * settings.DEFAULT_DECORATION_GAP) {
								newSize.x = display.children[i].getSize.x + 2 * settings.DEFAULT_DECORATION_GAP;
							}

							if (display.children[i].getSize.y > newSize.y - headerHeight - 4 * settings.DEFAULT_DECORATION_GAP) {
								newSize.y = display.children[i].getSize.y + headerHeight + 4 * settings.DEFAULT_DECORATION_GAP;
							}
						}						

						rectangle.setSize = newSize;
						
						childrenRectangle.setSize = new SFVec2f(newSize.x, newSize.y - headerHeight - 2 * settings.DEFAULT_DECORATION_GAP);

						if (INITIALIZED) {
							setAppearance();
							setLine();
							headersSetup();
							setText();
							selectTab(getSelectedIndex);
						}
					}
					
					function _setTransparency(newTransparency) {
						if (INITIALIZED) {
							setTransparency(newTransparency);
						}
					}
					
					function setTransparency(newTransparency) {
						var affectChildren = newTransparency > 0;
						
						newTransparency = Math.abs(newTransparency);
						
						rectangle.setTransparency = newTransparency;
						//headersPanel.setTransparency = newTransparency;
						lineMaterial.transparency = newTransparency;
						
						var l = display.children.length;
						
						for (var i = 0; i < l; i++) {
							orderedGroup2.children[i].children[1].setTransparency = newTransparency;
						}
						
						if (affectChildren) {
							for (var i = 0; i < l; i++) {
								if (display.children[i].hasEventIn("setTransparency")) {
									display.children[i].setTransparency = newTransparency;
								}
							}
						}
					}
				]]>
				</Script>

			</ProtoBody>
		</ProtoDeclare>
		
	</Scene>
</X3D>