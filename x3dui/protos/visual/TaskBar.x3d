<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.2//EN"   "http://www.web3d.org/specifications/x3d-3.2.dtd">
<X3D profile="Immersive" version="3.2" xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.2.xsd">
	<head />
	<Scene>		
	
		<ExternProtoDeclare name="Rectangle" url='"Rectangle.x3d#Rectangle"'>
			<field name="settings" type="SFNode" accessType="inputOnly" />
			<field name="setup" type="SFBool" accessType="inputOnly" />
			<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
			
			<field name="movable" type="SFBool" accessType="initializeOnly" />
			<field name="position" type="SFVec2f" accessType="initializeOnly" />
			
			<field name="isMovable" type="SFBool" accessType="outputOnly" />
			<field name="getPosition" type="SFVec2f" accessType="outputOnly" />
			
			<field name="setMovable" type="SFBool" accessType="inputOnly" />
			<field name="setPosition" type="SFVec2f" accessType="inputOnly" />
			
			<field name="children" type="MFNode" accessType="initializeOnly"></field>
			<field name="size" type="SFVec2f" accessType="initializeOnly" />
			<field name="visible" type="SFBool" accessType="initializeOnly" />
			<field name="color" type="SFColor" accessType="initializeOnly" />
			<field name="transparency" type="SFFloat" accessType="initializeOnly" />
			<field name="border" type="SFString" accessType="initializeOnly" />
			
			<field name="getSize" type="SFVec2f" accessType="outputOnly" />
			<field name="isVisible" type="SFBool" accessType="outputOnly" />
			<field name="getColor" type="SFColor" accessType="outputOnly" />
			<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
			<field name="getBorder" type="SFString" accessType="outputOnly" />
			
			<field name="setSize" type="SFVec2f" accessType="inputOnly" />
			<field name="setVisible" type="SFBool" accessType="inputOnly" />
			<field name="setColor" type="SFColor" accessType="inputOnly" />
			<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
			<field name="setBorder" type="SFString" accessType="inputOnly" />
		</ExternProtoDeclare>
	
		<!-- This prototype generates a task bar object for virtual desktop.
				It is created as a singleton from <proto>Display</proto> and
				should not be instantiated manually. -->
		<ProtoDeclare name="TaskBar">
			<ProtoInterface>
				<!-- <proto>Settings</proto> object should be passed in this parameter. -->
				<field name="settings" type="SFNode" accessType="inputOnly"></field>
				<!-- Initializes the component and prepares it for visualization. -->
				<field name="setup" type="SFBool" accessType="inputOnly" />
				<!-- Causes the component to reposition itself and all its children in the z-depth stack. -->
				<field name="applyZOrder" type="SFBool" accessType="inputOnly" />
				
				<!-- Specifies whether the component should be visible. -->
				<field name="visible" type="SFBool" accessType="initializeOnly" value="true" />
				<!-- Specifies what color the component should be. -->
				<field name="color" type="SFColor" accessType="initializeOnly" value="0.832 0.8164 0.7852" />
				<!-- Specifies the transparency level of the component. 
						If the value provided is positive, all children will also be assigned
						the same transparency level; otherwise, only the container object
						will be of the specified transparency. -->
				<field name="transparency" type="SFFloat" accessType="initializeOnly" value="0" />
				
				<!-- Returns the size of the component. This method is called from 
						<proto>LayoutManager</proto> and is therefore implemented 
						for conformance purposes. Note that this component does not 
						allow you to control its size. -->
				<field name="getSize" type="SFVec2f" accessType="outputOnly" />
				<!-- Indicates whether the component is visible. -->
				<field name="isVisible" type="SFBool" accessType="outputOnly" />
				<!-- Returns the color of the component. -->
				<field name="getColor" type="SFColor" accessType="outputOnly" />
				<!-- Returns the component's transparency level. -->
				<field name="getTransparency" type="SFFloat" accessType="outputOnly" />
				
				<!-- Sets the visibility status of the component. -->
				<field name="setVisible" type="SFBool" accessType="inputOnly" />
				<!-- Sets the color of the component. -->
				<field name="setColor" type="SFColor" accessType="inputOnly" />
				<!-- Sets the component's transparency level. -->
				<field name="setTransparency" type="SFFloat" accessType="inputOnly" />
				
				<!-- Provides an array of titles that will be assigned to 
						the children of the component. -->
				<field name="setChildrenTitles" type="MFString" accessType="inputOnly"></field>
				<!-- Provides an array of ids that will be assigned to
						the children of the component. -->
				<field name="setChildrenIds" type="MFString" accessType="inputOnly"></field>
				<!-- Sets the elevation level of the component. This method is called from
						<proto>Display</proto> to draw the <proto>TaskBar</proto> on top
						of other components, regardless of their depth in the z-stack. -->
				<field name="setElevation" type="SFFloat" accessType="inputOnly" />
				<!-- Forces the component to lay out its children based on its
						<group>layout</group> preference.-->
				<field name="doLayout" type="SFInt32" accessType="inputOnly" />
			</ProtoInterface>
			<ProtoBody>
				<Transform DEF="taskBarHolder">
					<ProtoInstance DEF="rectangle" name="Rectangle">
						<fieldValue name="children">
							<OrderedGroup DEF="orderedGroup">
							</OrderedGroup>
						</fieldValue>
						<IS>			
							<connect nodeField="visible" protoField="visible"/>
							<connect nodeField="color" protoField="color"/>
							
							<connect nodeField="getSize" protoField="getSize"/>
							<connect nodeField="isVisible" protoField="isVisible"/>
							<connect nodeField="getColor" protoField="getColor"/>
							<connect nodeField="getTransparency" protoField="getTransparency"/>
	
							<connect nodeField="setVisible" protoField="setVisible"/>
							<connect nodeField="setColor" protoField="setColor"/>
						</IS>
						<fieldValue name="border" value="TOP_LEFT" />
					</ProtoInstance>
				</Transform>
				
				<Script DEF="S" directOutput="true">
					<!-- referenced objects -->
					<field name="taskBarHolder" type="SFNode" accessType="initializeOnly">
						<Transform USE="taskBarHolder" />
					</field>
					<field name="rectangle" type="SFNode" accessType="initializeOnly">
						<Rectangle USE="rectangle" />
					</field>
					<field name="orderedGroup" type="SFNode" accessType="initializeOnly">
						<OrderedGroup USE="orderedGroup" />
					</field>
			
					<field name="settings" accessType="inputOnly" type="SFNode" />
					<field name="setup" accessType="inputOnly" type="SFBool" />
					<field name="applyZOrder" accessType="inputOnly" type="SFBool" />
					
					<field name="COMPONENT_ID" accessType="inputOutput" type="SFInt32" />
					
					<!-- attributes of the class -->
					<field name="transparency" type="SFFloat" accessType="initializeOnly" />
					
					<field name="_setSize" type="SFVec2f" accessType="inputOnly" />
					<field name="_setTransparency" type="SFFloat" accessType="inputOnly" />
					<field name="_setChildrenTitles" type="MFString" accessType="inputOnly" />
					<field name="_setChildrenIds" type="MFString" accessType="inputOnly" />
					<field name="setElevation" type="SFFloat" accessType="inputOnly"/>
					<field name="doLayout" type="SFInt32" accessType="inputOnly" />
					
					<field name="INITIALIZED" accessType="inputOutput" type="SFBool" />
					
					<field name="childrenTitles" type="MFString" accessType="inputOutput" />
					<field name="childrenIds" type="MFString" accessType="inputOutput" />
					
					<field name="updateWindowSize" accessType="inputOnly" type="SFVec2f" />
					<field name="buttonIsClicked" accessType="inputOnly" type="SFBool" />
					
					<IS>
						<connect nodeField="settings" protoField="settings"/>
						<connect nodeField="setup" protoField="setup"/>
						<connect nodeField="applyZOrder" protoField="applyZOrder"/>

						<connect nodeField="transparency" protoField="transparency"/>

						<connect nodeField="_setTransparency" protoField="setTransparency"/>
						<connect nodeField="_setChildrenTitles" protoField="setChildrenTitles"/>
						<connect nodeField="_setChildrenIds" protoField="setChildrenIds"/>
						<connect nodeField="setElevation" protoField="setElevation"/>
						<connect nodeField="doLayout" protoField="doLayout"/>
					</IS>
				<![CDATA[
					ecmascript:

					function initialize() {
					}

					function setup() {
						INITIALIZED = false;
										
						rectangle.settings = settings;
						rectangle.setup = true;
					
						COMPONENT_ID = settings.COMPONENT_ID++;
					
						if (settings.DEBUG) print("task bar setup(" + COMPONENT_ID + ")");
					
						/*
						setTransparency(transparency);
						setBorder(border);
						setText(text);
						*/
						
						doLayout();
						
						INITIALIZED = true;
						
						Browser.addRoute(Browser, "windowSize", Browser.getScript(), "updateWindowSize");
					}
										
					function applyZOrder() {
						rectangle.applyZOrder = true;
					
						if (settings.DEBUG) print("\task bar applyZOrder(" + settings.Z_ORDER_COUNT + ")");
					
						var l = orderedGroup.children.length;

						for (var i = 0; i < l; i++) {
							orderedGroup.order[i] = settings.Z_ORDER_COUNT + i * settings.Z_ORDER_STEP;
						}
						
						settings.Z_ORDER_COUNT++;
						
						for (var i = 0; i < l; i++) {
							if (orderedGroup.children[i].children[0].hasEventIn("applyZOrder")) {
								orderedGroup.children[i].children[0].applyZOrder = true;
							}
						}
					}
					
					function _setChildrenTitles(newChildrenTitles) {
						if (INITIALIZED) {
							setChildrenTitles(newChildrenTitles);
						}
					}
					
					function setChildrenTitles(newChildrenTitles) {
						childrenTitles = newChildrenTitles;
					}
					
					function _setChildrenIds(newChildrenIds) {
						if (INITIALIZED) {
							setChildrenIds(newChildrenIds);
						}
					}
					
					function setChildrenIds(newChildrenIds) {
						childrenIds = newChildrenIds;
					}
					
					function updateWindowSize(newWindowSize) {
						doLayout(settings.ACTIVE_ID);
					}
					
					function childrenSetup() {
						settings.COMPONENT_ID = COMPONENT_ID + 1;
					
						if (settings.DEBUG) print("task bar setup(" + COMPONENT_ID + ")");
					
						var l = orderedGroup.children.length;
						
						for (var i = 0; i < l; i++) {
							if (orderedGroup.children[i].children[0].hasEventIn("settings")) {
								orderedGroup.children[i].children[0].settings = settings;
							}
							
							if (orderedGroup.children[i].children[0].hasEventIn("setup")) {
								orderedGroup.children[i].children[0].setup = true;
							}
						}
					}
					
					function doLayout(id) {
						var width;
						var height;
						var x;
						var y;
						
						var widthToHeightAspect = Browser.getWindowSizeX() / Browser.getWindowSizeY();
					
						var widthIsSmaller = (widthToHeightAspect < 1.0);
					
						height = settings.DEFAULT_FONT_SIZE * settings.DEFAULT_FONT_SCALE + 4 * settings.DEFAULT_DECORATION_GAP;
					
						if (widthIsSmaller) {
							width = 2 * settings.FULL_VIEW_RATIO;
							x = -width / 2;
							y = -settings.FULL_VIEW_RATIO / widthToHeightAspect + height;
						} else {
							width = 2 * settings.FULL_VIEW_RATIO * widthToHeightAspect;
							x = -width / 2;
							y = -settings.FULL_VIEW_RATIO + height;
						}

						taskBarHolder.translation.x = x;
						taskBarHolder.translation.y = y;
						rectangle.setSize = new SFVec2f(width, height);
												
						var l = childrenIds.length;
						var vrml;
						var textButton;
						var transform;
						
						var buttonWidth;
						
						if ((settings.DEFAULT_TASK_BAR_BUTTON_WIDTH + settings.DEFAULT_DECORATION_GAP) * l + settings.DEFAULT_DECORATION_GAP > width) {
							buttonWidth = (width - (l + 1) * settings.DEFAULT_DECORATION_GAP) / l;
						} else {
							buttonWidth = settings.DEFAULT_TASK_BAR_BUTTON_WIDTH;
						}
						
						var buttonHeight = height - 2 * settings.DEFAULT_DECORATION_GAP;
						
						orderedGroup.children = new MFNode();

						for (var i = 0; i < l; i++) {
							vrml = 
								"DEF taskBarButton" + childrenIds[i] + " TextToggleButton {\n" +
									"\tsize  " + buttonWidth + " " + buttonHeight + "\n" +
									"\tonText  \"" + childrenTitles[i] + "\"\n" +
									"\toffText  \"" + childrenTitles[i] + "\"\n" +
									"\tpressed  " + (childrenIds[i] == id ? "TRUE" : "FALSE") + "\n" +
								"}";
								
							//print(vrml);
								
							textButton = Browser.createVrmlFromString(vrml)[0];
							
							vrml = 
								"DEF taskBarButtonHolder" + childrenIds[i] + " Transform {" +
									"translation  " + 
										(i * (buttonWidth + settings.DEFAULT_DECORATION_GAP) + settings.DEFAULT_DECORATION_GAP) + " " + 
										-settings.DEFAULT_DECORATION_GAP + " " + 
										settings.TOUCH_SENSOR_ELEVATION + " " +
								"}";
								
							//print(vrml);
								
							transform = Browser.createVrmlFromString(vrml)[0];
								
							transform.children[0] = textButton;
							
							orderedGroup.children[i] = transform;
							
							Browser.deleteRoute(textButton, "isClicked", Browser.getScript(), "buttonIsClicked");
							Browser.addRoute(textButton, "isClicked", Browser.getScript(), "buttonIsClicked");
						}
						
						childrenSetup();
					}
					
					function buttonIsClicked() {
						var l = childrenIds.length;
						
						var clickedId = -1;
						
						for (var i = 0; i < l; i++) {
							if (	orderedGroup.children[i].children[0].isClicked &&
									orderedGroup.children[i].children[0].isPressed) {
								clickedId = childrenIds[i];
								break;
							}
						}
						
						//print("clickedId: " + clickedId);
						
						settings.ACTIVE_ID = clickedId;
					}
					
					function _setTransparency(newTransparency) {
						if (INITIALIZED) {
							setTransparency(newTransparency);
						}
					}
					
					function setTransparency(newTransparency) {
						var affectChildren = newTransparency > 0;
						
						newTransparency = Math.abs(newTransparency);
						
						rectangle.setTransparency = newTransparency;
						
						if (affectChildren) {
							var l = orderedGroup.children.length;
	
							for (var i = 0; i < l; i++) {
								if (orderedGroup.children[i].hasEventIn("setTransparency")) {
									orderedGroup.children[i].setTransparency = newTransparency;
								}
							}
						}
					}
					
					function setElevation(elevation) {
						taskBarHolder.translation.z = elevation;
						applyZOrder();
					}
				]]>
				</Script>

			</ProtoBody>
		</ProtoDeclare>
		
	</Scene>
</X3D>